# Our root logger is configured to send the logs to two Appenders – the console and the rolling.
# the status attribute represents the level at which internal log4j events should be logged
status = warn
name=RollingFileAndStdoutLogConfig

# Log files location
property.basePath = D:/Init/apirest/logs

# Redirect log messages to console
# par défaut la target est : stdout pour le ConsoleAppender
appender.console.type=Console
appender.console.name=ConsoleLogger
appender.console.layout.type=PatternLayout
appender.console.layout.pattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %msg%n

# Redirect log messages to a log file, support file rolling.
## RollingFileAppender name, pattern, path and rollover policy
appender.rolling.type=RollingFile
appender.rolling.name=RollingFileLogger
appender.rolling.fileName=${basePath}/apirest.log
appender.rolling.filePattern=${basePath}/apirest_%d{MM-dd-yyyy}.log.gz
appender.rolling.layout.type=PatternLayout
appender.rolling.layout.pattern=%d{yyyy-MM-dd HH:mm:ss} %-5level [%t] %c{1}:%L - %msg%n
appender.rolling.policies.type = Policies
## RollingFileAppender rotation policy
appender.rolling.policies.size.type=SizeBasedTriggeringPolicy
appender.rolling.policies.size.size=5MB
appender.rolling.strategy.type=DefaultRolloverStrategy
appender.rolling.strategy.delete.type = Delete
appender.rolling.strategy.delete.basePath = ${basePath}
appender.rolling.strategy.max=10
appender.rolling.strategy.delete.ifLastModified.type = IfLastModified
## Delete all files older than 30 days
appender.rolling.strategy.delete.ifLastModified.age = 30d

#Loggers: this element contains a list of Logger instances. The Root element is a standard logger that outputs all messages
# Besides the Root logger, we can also define additional Logger elements with different log levels,
# appenders or filters. Each Logger requires a name that can be used later to reference it
loggers=file
logger.file.name=FileLogger
logger.file.level=error
logger.file.appenderRef.rolling.ref = RollingFileLogger

# Configure root logger. The Root logger is mandatory in every configuration
# Our root logger is configured to log everything starting from the error severity.
rootLogger.level=info
rootLogger.appenderRef.console.ref = ConsoleLogger